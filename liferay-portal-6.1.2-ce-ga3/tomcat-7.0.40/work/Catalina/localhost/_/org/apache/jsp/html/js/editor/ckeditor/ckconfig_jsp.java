/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.40
 * Generated at: 2013-12-30 08:21:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.html.js.editor.ckeditor;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.liferay.portal.kernel.language.LanguageUtil;
import com.liferay.portal.kernel.util.ContentTypes;
import com.liferay.portal.kernel.util.HtmlUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.ParamUtil;
import java.util.Locale;

public final class ckconfig_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/tld/c.tld", Long.valueOf(1388348725152L));
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

String contentsLanguageId = ParamUtil.getString(request, "contentsLanguageId");
String cssPath = ParamUtil.getString(request, "cssPath");
String cssClasses = ParamUtil.getString(request, "cssClasses");
String languageId = ParamUtil.getString(request, "languageId");
boolean resizable = ParamUtil.getBoolean(request, "resizable");

response.setContentType(ContentTypes.TEXT_JAVASCRIPT);

      out.write("\r\n");
      out.write("\r\n");
      out.write("if (!CKEDITOR.stylesSet.get('liferayStyles')) {\r\n");
      out.write("\tCKEDITOR.addStylesSet(\r\n");
      out.write("\t\t'liferayStyles',\r\n");
      out.write("\t\t[\r\n");
      out.write("\r\n");
      out.write("\t\t// Block Styles\r\n");
      out.write("\r\n");
      out.write("\t\t{name: 'Normal', element: 'p'},\r\n");
      out.write("\t\t{name: 'Heading 1', element: 'h1'},\r\n");
      out.write("\t\t{name: 'Heading 2', element: 'h2'},\r\n");
      out.write("\t\t{name: 'Heading 3', element: 'h3'},\r\n");
      out.write("\t\t{name: 'Heading 4', element: 'h4'},\r\n");
      out.write("\r\n");
      out.write("\t\t// Special classes\r\n");
      out.write("\r\n");
      out.write("\t\t{name: 'Preformatted Text', element:'pre'},\r\n");
      out.write("\t\t{name: 'Cited Work', element:'cite'},\r\n");
      out.write("\t\t{name: 'Computer Code', element:'code'},\r\n");
      out.write("\r\n");
      out.write("\t\t// Custom styles\r\n");
      out.write("\r\n");
      out.write("\t\t{name: 'Info Message', element: 'div', attributes: {'class': 'portlet-msg-info'}},\r\n");
      out.write("\t\t{name: 'Alert Message', element: 'div', attributes: {'class': 'portlet-msg-alert'}},\r\n");
      out.write("\t\t{name: 'Error Message', element: 'div', attributes: {'class': 'portlet-msg-error'}}\r\n");
      out.write("\t\t]\r\n");
      out.write("\t);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.autoParagraph = false;\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.bodyClass = 'html-editor ");
      out.print( HtmlUtil.escapeJS(cssClasses) );
      out.write("';\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.contentsCss = '");
      out.print( HtmlUtil.escapeJS(cssPath) );
      out.write("/main.css';\r\n");
      out.write("\r\n");

Locale contentsLocale = LocaleUtil.fromLanguageId(contentsLanguageId);

String contentsLanguageDir = LanguageUtil.get(contentsLocale, "lang.dir");

      out.write("\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.contentsLangDirection = '");
      out.print( HtmlUtil.escapeJS(contentsLanguageDir) );
      out.write("';\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.contentsLanguage = '");
      out.print( HtmlUtil.escapeJS(contentsLanguageId.replace("iw_", "he_")) );
      out.write("';\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.entities = false;\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.height = 265;\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.language = '");
      out.print( HtmlUtil.escapeJS(languageId.replace("iw_", "he_")) );
      out.write("';\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.resize_enabled = ");
      out.print( resizable );
      out.write(";\r\n");
      out.write("\r\n");
      //  c:if
      com.liferay.taglib.core.IfTag _jspx_th_c_005fif_005f0 = (com.liferay.taglib.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(com.liferay.taglib.core.IfTag.class);
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /html/js/editor/ckeditor/ckconfig.jsp(89,0) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest( resizable );
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        out.write("\r\n");
        out.write("\tCKEDITOR.config.resize_dir = 'vertical';\r\n");
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
        return;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      out.write("\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.stylesCombo_stylesSet = 'liferayStyles';\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.toolbar_editInPlace = [\r\n");
      out.write("\t['Styles'],\r\n");
      out.write("\t['Bold', 'Italic', 'Underline', 'Strike'],\r\n");
      out.write("\t['Subscript', 'Superscript', 'SpecialChar'],\r\n");
      out.write("\t['Undo', 'Redo'],\r\n");
      out.write("\t['SpellChecker', 'Scayt'],\r\n");
      out.write("\t['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent'], ['Source', 'RemoveFormat'],\r\n");
      out.write("];\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.toolbar_email = [\r\n");
      out.write("\t['FontSize', 'TextColor', 'BGColor', '-', 'Bold', 'Italic', 'Underline', 'Strike'],\r\n");
      out.write("\t['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],\r\n");
      out.write("\t['SpellChecker', 'Scayt'],\r\n");
      out.write("\t'/',\r\n");
      out.write("\t['Undo', 'Redo', '-', 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'SelectAll', 'RemoveFormat'],\r\n");
      out.write("\t['Source'],\r\n");
      out.write("\t['Link', 'Unlink'],\r\n");
      out.write("\t['Image']\r\n");
      out.write("];\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.toolbar_liferay = [\r\n");
      out.write("\t['Styles', 'FontSize', '-', 'TextColor', 'BGColor'],\r\n");
      out.write("\t['Bold', 'Italic', 'Underline', 'Strike'],\r\n");
      out.write("\t['Subscript', 'Superscript'],\r\n");
      out.write("\t'/',\r\n");
      out.write("\t['Undo', 'Redo', '-', 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'SelectAll', 'RemoveFormat'],\r\n");
      out.write("\t['Find', 'Replace', 'SpellChecker', 'Scayt'],\r\n");
      out.write("\t['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent'],\r\n");
      out.write("\t['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],\r\n");
      out.write("\t'/',\r\n");
      out.write("\t['Source'],\r\n");
      out.write("\t['Link', 'Unlink', 'Anchor'],\r\n");
      out.write("\t['Image', 'Flash', 'Table', '-', 'Smiley', 'SpecialChar']\r\n");
      out.write("];\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.config.toolbar_liferayArticle = [\r\n");
      out.write("\t['Styles', 'FontSize', '-', 'TextColor', 'BGColor'],\r\n");
      out.write("\t['Bold', 'Italic', 'Underline', 'Strike'],\r\n");
      out.write("\t['Subscript', 'Superscript'],\r\n");
      out.write("\t'/',\r\n");
      out.write("\t['Undo', 'Redo', '-', 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'SelectAll', 'RemoveFormat'],\r\n");
      out.write("\t['Find', 'Replace', 'SpellChecker', 'Scayt'],\r\n");
      out.write("\t['NumberedList','BulletedList','-','Outdent','Indent','Blockquote'],\r\n");
      out.write("\t['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],\r\n");
      out.write("\t'/',\r\n");
      out.write("\t['Source'],\r\n");
      out.write("\t['Link', 'Unlink', 'Anchor'],\r\n");
      out.write("\t['Image', 'Flash', 'Table', '-', 'Smiley', 'SpecialChar', 'LiferayPageBreak']\r\n");
      out.write("];\r\n");
      out.write("\r\n");
      out.write("CKEDITOR.on(\r\n");
      out.write("\t'dialogDefinition',\r\n");
      out.write("\tfunction(event) {\r\n");
      out.write("\t\tvar dialogDefinition = event.data.definition;\r\n");
      out.write("\r\n");
      out.write("\t\tvar onShow = dialogDefinition.onShow;\r\n");
      out.write("\r\n");
      out.write("\t\tdialogDefinition.onShow = function() {\r\n");
      out.write("\t\t\tif (typeof onShow === 'function') {\r\n");
      out.write("\t\t\t\tonShow.apply(this);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (window.top != window.self) {\r\n");
      out.write("\t\t\t\tvar editorElement = this.getParentEditor().container;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tvar documentPosition = editorElement.getDocumentPosition();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tvar dialogSize = this.getSize();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tvar x = documentPosition.x + ((editorElement.getSize('width', true) - dialogSize.width) / 2);\r\n");
      out.write("\t\t\t\tvar y = documentPosition.y + ((editorElement.getSize('height', true) - dialogSize.height) / 2);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tthis.move(x, y, false);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write(");");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
