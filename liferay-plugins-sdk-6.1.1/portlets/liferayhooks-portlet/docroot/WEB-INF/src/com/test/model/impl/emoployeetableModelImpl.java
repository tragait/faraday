/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.test.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.test.model.emoployeetable;
import com.test.model.emoployeetableModel;
import com.test.model.emoployeetableSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the emoployeetable service. Represents a row in the &quot;service_emoployeetable&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.test.model.emoployeetableModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link emoployeetableImpl}.
 * </p>
 *
 * @author RahulTyagi
 * @see emoployeetableImpl
 * @see com.test.model.emoployeetable
 * @see com.test.model.emoployeetableModel
 * @generated
 */
@JSON(strict = true)
public class emoployeetableModelImpl extends BaseModelImpl<emoployeetable>
	implements emoployeetableModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a emoployeetable model instance should use the {@link com.test.model.emoployeetable} interface instead.
	 */
	public static final String TABLE_NAME = "service_emoployeetable";
	public static final Object[][] TABLE_COLUMNS = {
			{ "fooId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "empid", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table service_emoployeetable (fooId LONG,name VARCHAR(75) null,empid INTEGER not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table service_emoployeetable";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.test.model.emoployeetable"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.test.model.emoployeetable"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static emoployeetable toModel(emoployeetableSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		emoployeetable model = new emoployeetableImpl();

		model.setFooId(soapModel.getFooId());
		model.setName(soapModel.getName());
		model.setEmpid(soapModel.getEmpid());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<emoployeetable> toModels(emoployeetableSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<emoployeetable> models = new ArrayList<emoployeetable>(soapModels.length);

		for (emoployeetableSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.test.model.emoployeetable"));

	public emoployeetableModelImpl() {
	}

	public int getPrimaryKey() {
		return _empid;
	}

	public void setPrimaryKey(int primaryKey) {
		setEmpid(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_empid);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return emoployeetable.class;
	}

	public String getModelClassName() {
		return emoployeetable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("fooId", getFooId());
		attributes.put("name", getName());
		attributes.put("empid", getEmpid());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long fooId = (Long)attributes.get("fooId");

		if (fooId != null) {
			setFooId(fooId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Integer empid = (Integer)attributes.get("empid");

		if (empid != null) {
			setEmpid(empid);
		}
	}

	@JSON
	public long getFooId() {
		return _fooId;
	}

	public void setFooId(long fooId) {
		_fooId = fooId;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	@JSON
	public int getEmpid() {
		return _empid;
	}

	public void setEmpid(int empid) {
		_empid = empid;
	}

	@Override
	public emoployeetable toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (emoployeetable)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public emoployeetable toUnescapedModel() {
		return (emoployeetable)this;
	}

	@Override
	public Object clone() {
		emoployeetableImpl emoployeetableImpl = new emoployeetableImpl();

		emoployeetableImpl.setFooId(getFooId());
		emoployeetableImpl.setName(getName());
		emoployeetableImpl.setEmpid(getEmpid());

		emoployeetableImpl.resetOriginalValues();

		return emoployeetableImpl;
	}

	public int compareTo(emoployeetable emoployeetable) {
		int primaryKey = emoployeetable.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof emoployeetable)) {
			return false;
		}

		emoployeetable emoployeetable = (emoployeetable)obj;

		int primaryKey = emoployeetable.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<emoployeetable> toCacheModel() {
		emoployeetableCacheModel emoployeetableCacheModel = new emoployeetableCacheModel();

		emoployeetableCacheModel.fooId = getFooId();

		emoployeetableCacheModel.name = getName();

		String name = emoployeetableCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			emoployeetableCacheModel.name = null;
		}

		emoployeetableCacheModel.empid = getEmpid();

		return emoployeetableCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{fooId=");
		sb.append(getFooId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", empid=");
		sb.append(getEmpid());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.test.model.emoployeetable");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>fooId</column-name><column-value><![CDATA[");
		sb.append(getFooId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>empid</column-name><column-value><![CDATA[");
		sb.append(getEmpid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = emoployeetable.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			emoployeetable.class
		};
	private long _fooId;
	private String _name;
	private int _empid;
	private emoployeetable _escapedModel;
}